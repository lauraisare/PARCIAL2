// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/14/2024 21:10:02"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    moore_peaje
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module moore_peaje_vlg_sample_tst(
	clk,
	reset,
	tx,
	sampler_tx
);
input  clk;
input  reset;
input  tx;
output sampler_tx;

reg sample;
time current_time;
always @(clk or reset or tx)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module moore_peaje_vlg_check_tst (
	alarma,
	f,
	led_rojo,
	sema_f,
	sema_i,
	talan_f,
	talan_i,
	sampler_rx
);
input  alarma;
input  f;
input  led_rojo;
input  sema_f;
input  sema_i;
input  talan_f;
input  talan_i;
input sampler_rx;

reg  alarma_expected;
reg  f_expected;
reg  led_rojo_expected;
reg  sema_f_expected;
reg  sema_i_expected;
reg  talan_f_expected;
reg  talan_i_expected;

reg  alarma_prev;
reg  f_prev;
reg  led_rojo_prev;
reg  sema_f_prev;
reg  sema_i_prev;
reg  talan_f_prev;
reg  talan_i_prev;

reg  alarma_expected_prev;
reg  f_expected_prev;
reg  led_rojo_expected_prev;
reg  sema_f_expected_prev;
reg  sema_i_expected_prev;
reg  talan_f_expected_prev;
reg  talan_i_expected_prev;

reg  last_alarma_exp;
reg  last_f_exp;
reg  last_led_rojo_exp;
reg  last_sema_f_exp;
reg  last_sema_i_exp;
reg  last_talan_f_exp;
reg  last_talan_i_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	alarma_prev = alarma;
	f_prev = f;
	led_rojo_prev = led_rojo;
	sema_f_prev = sema_f;
	sema_i_prev = sema_i;
	talan_f_prev = talan_f;
	talan_i_prev = talan_i;
end

// update expected /o prevs

always @(trigger)
begin
	alarma_expected_prev = alarma_expected;
	f_expected_prev = f_expected;
	led_rojo_expected_prev = led_rojo_expected;
	sema_f_expected_prev = sema_f_expected;
	sema_i_expected_prev = sema_i_expected;
	talan_f_expected_prev = talan_f_expected;
	talan_i_expected_prev = talan_i_expected;
end



// expected alarma
initial
begin
	alarma_expected = 1'bX;
end 

// expected f
initial
begin
	f_expected = 1'bX;
end 

// expected led_rojo
initial
begin
	led_rojo_expected = 1'bX;
end 

// expected sema_f
initial
begin
	sema_f_expected = 1'bX;
end 

// expected sema_i
initial
begin
	sema_i_expected = 1'bX;
end 

// expected talan_f
initial
begin
	talan_f_expected = 1'bX;
end 

// expected talan_i
initial
begin
	talan_i_expected = 1'bX;
end 
// generate trigger
always @(alarma_expected or alarma or f_expected or f or led_rojo_expected or led_rojo or sema_f_expected or sema_f or sema_i_expected or sema_i or talan_f_expected or talan_f or talan_i_expected or talan_i)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected alarma = %b | expected f = %b | expected led_rojo = %b | expected sema_f = %b | expected sema_i = %b | expected talan_f = %b | expected talan_i = %b | ",alarma_expected_prev,f_expected_prev,led_rojo_expected_prev,sema_f_expected_prev,sema_i_expected_prev,talan_f_expected_prev,talan_i_expected_prev);
	$display("| real alarma = %b | real f = %b | real led_rojo = %b | real sema_f = %b | real sema_i = %b | real talan_f = %b | real talan_i = %b | ",alarma_prev,f_prev,led_rojo_prev,sema_f_prev,sema_i_prev,talan_f_prev,talan_i_prev);
`endif
	if (
		( alarma_expected_prev !== 1'bx ) && ( alarma_prev !== alarma_expected_prev )
		&& ((alarma_expected_prev !== last_alarma_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alarma :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alarma_expected_prev);
		$display ("     Real value = %b", alarma_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alarma_exp = alarma_expected_prev;
	end
	if (
		( f_expected_prev !== 1'bx ) && ( f_prev !== f_expected_prev )
		&& ((f_expected_prev !== last_f_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f_exp = f_expected_prev;
	end
	if (
		( led_rojo_expected_prev !== 1'bx ) && ( led_rojo_prev !== led_rojo_expected_prev )
		&& ((led_rojo_expected_prev !== last_led_rojo_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_rojo :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_rojo_expected_prev);
		$display ("     Real value = %b", led_rojo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_led_rojo_exp = led_rojo_expected_prev;
	end
	if (
		( sema_f_expected_prev !== 1'bx ) && ( sema_f_prev !== sema_f_expected_prev )
		&& ((sema_f_expected_prev !== last_sema_f_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sema_f :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sema_f_expected_prev);
		$display ("     Real value = %b", sema_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sema_f_exp = sema_f_expected_prev;
	end
	if (
		( sema_i_expected_prev !== 1'bx ) && ( sema_i_prev !== sema_i_expected_prev )
		&& ((sema_i_expected_prev !== last_sema_i_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sema_i :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sema_i_expected_prev);
		$display ("     Real value = %b", sema_i_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sema_i_exp = sema_i_expected_prev;
	end
	if (
		( talan_f_expected_prev !== 1'bx ) && ( talan_f_prev !== talan_f_expected_prev )
		&& ((talan_f_expected_prev !== last_talan_f_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port talan_f :: @time = %t",  $realtime);
		$display ("     Expected value = %b", talan_f_expected_prev);
		$display ("     Real value = %b", talan_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_talan_f_exp = talan_f_expected_prev;
	end
	if (
		( talan_i_expected_prev !== 1'bx ) && ( talan_i_prev !== talan_i_expected_prev )
		&& ((talan_i_expected_prev !== last_talan_i_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port talan_i :: @time = %t",  $realtime);
		$display ("     Expected value = %b", talan_i_expected_prev);
		$display ("     Real value = %b", talan_i_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_talan_i_exp = talan_i_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module moore_peaje_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
reg tx;
// wires                                               
wire alarma;
wire f;
wire led_rojo;
wire sema_f;
wire sema_i;
wire talan_f;
wire talan_i;

wire sampler;                             

// assign statements (if any)                          
moore_peaje i1 (
// port map - connection between master ports and signals/registers   
	.alarma(alarma),
	.clk(clk),
	.f(f),
	.led_rojo(led_rojo),
	.reset(reset),
	.sema_f(sema_f),
	.sema_i(sema_i),
	.talan_f(talan_f),
	.talan_i(talan_i),
	.tx(tx)
);

// clk
initial
begin
	repeat(33)
	begin
		clk = 1'b0;
		clk = #15000 1'b1;
		# 15000;
	end
	clk = 1'b0;
end 

// tx
initial
begin
	tx = 1'b0;
	tx = #10000 1'b1;
	tx = #40000 1'b0;
	tx = #50000 1'b1;
	tx = #40000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

moore_peaje_vlg_sample_tst tb_sample (
	.clk(clk),
	.reset(reset),
	.tx(tx),
	.sampler_tx(sampler)
);

moore_peaje_vlg_check_tst tb_out(
	.alarma(alarma),
	.f(f),
	.led_rojo(led_rojo),
	.sema_f(sema_f),
	.sema_i(sema_i),
	.talan_f(talan_f),
	.talan_i(talan_i),
	.sampler_rx(sampler)
);
endmodule

